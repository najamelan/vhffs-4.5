#hide pgsql_servers = PGHOST/PGDB/PGUSER/PGPASS
hide pgsql_servers = 127.0.0.1/vhffs/vhffs/vhffs
# Use these query if your MX2 directly uses VHFFS database
#PGSQL_RELAY_DOMAIN = ${lookup pgsql{SELECT mx.domain FROM vhffs_mx mx INNER JOIN vhffs_object omx ON omx.object_id=mx.object_id WHERE mx.domain=E'${quote_pgsql:$domain}' AND omx.state=6}}
#PGSQL_RELAY_CHECKLOCALPART = ${lookup pgsql{SELECT mx.domain FROM vhffs_mx mx WHERE mx.domain=E'${quote_pgsql:$domain}' AND ( EXISTS (SELECT mx.domain FROM vhffs_mx mx INNER JOIN vhffs_mx_catchall ca ON mx.mx_id=ca.mx_id INNER JOIN vhffs_mx_box box ON box.box_id=ca.box_id INNER JOIN vhffs_mx_localpart lpbox ON lpbox.localpart_id=box.localpart_id INNER JOIN vhffs_mx mxbox ON mxbox.mx_id=lpbox.mx_id WHERE mx.domain=E'${quote_pgsql:$domain}' AND box.state=6) OR EXISTS (SELECT mx.domain FROM vhffs_mx mx INNER JOIN vhffs_mx_localpart lp ON lp.mx_id=mx.mx_id INNER JOIN vhffs_mx_box box ON box.localpart_id=lp.localpart_id WHERE mx.domain=E'${quote_pgsql:$domain}' AND lp.localpart=E'${quote_pgsql:$local_part}' AND box.state=6) OR EXISTS (SELECT mx.domain FROM vhffs_mx mx INNER JOIN vhffs_mx_localpart lp ON lp.mx_id=mx.mx_id INNER JOIN vhffs_mx_redirect redir ON redir.localpart_id=lp.localpart_id WHERE mx.domain=E'${quote_pgsql:$domain}' AND lp.localpart=E'${quote_pgsql:$local_part}') OR EXISTS (SELECT mx.domain FROM vhffs_mx mx INNER JOIN vhffs_mx_localpart lp ON lp.mx_id=mx.mx_id INNER JOIN vhffs_mx_ml ml ON ml.localpart_id=lp.localpart_id INNER JOIN vhffs_object oml ON oml.object_id=ml.object_id WHERE mx.domain=E'${quote_pgsql:$domain}' AND (lp.localpart=E'${quote_pgsql:$local_part}' OR lp.localpart||'-request' = E'${quote_pgsql:$local_part}') AND oml.state=6))}}
# Use these query if your MX has a mirrored VHFFS db (using mirror-mx2.pl)
PGSQL_RELAY_DOMAIN = ${lookup pgsql{SELECT mx.domain FROM vhffs_mx2 mx WHERE mx.domain=E'${quote_pgsql:$domain}'}}
PGSQL_RELAY_CHECKLOCALPART = ${lookup pgsql{SELECT mx.domain FROM vhffs_mx2 mx WHERE mx.domain=E'${quote_pgsql:$domain}' AND (mx.catchall=true OR EXISTS (SELECT mx.domain FROM vhffs_mx2 mx INNER JOIN vhffs_mx2_localpart lp ON lp.mx_id=mx.mx_id WHERE mx.domain=E'${quote_pgsql:$domain}' AND lp.localpart=E'${quote_pgsql:$local_part}'))}}

exim_path = /usr/sbin/exim4

CONFDIR = /etc/exim4

domainlist local_domains = localhost

domainlist relay_to_domains = 

domainlist relay_this_domain = PGSQL_RELAY_DOMAIN

hostlist relay_from_hosts = 127.0.0.1

#av_scanner = clamd:192.168.3.50 7777 stream

qualify_domain = mx2.vhffs.org

gecos_pattern = ^([^,:]*)
gecos_name = $1

acl_smtp_rcpt = acl_check_rcpt

#acl_smtp_data = acl_check_data

message_size_limit = 10M

smtp_accept_max = 100
smtp_accept_max_per_host = 10

smtp_accept_max_per_connection = 1000
smtp_accept_queue_per_connection = 100

smtp_load_reserve = 20.0

deliver_queue_load_max = 5.0

queue_only_load = 5.0

host_lookup = *
rfc1413_hosts = *
rfc1413_query_timeout = 0s

primary_hostname = mx2.vhffs.org

ignore_bounce_errors_after = 4h

timeout_frozen_after = 30d

remote_max_parallel = 25
#freeze_tell = postmaster

spool_directory = /var/spool/exim4

trusted_users = Debian-exim

smtp_banner = "${primary_hostname} ESMTP Vhffs4 Mailer ${tod_full}"


begin acl

#acl_whitelist_local_deny:
#  accept hosts = ${if exists{CONFDIR/local_host_whitelist}\
#                        {CONFDIR/local_host_whitelist}\
#                        {}}
#  accept senders = ${if exists{CONFDIR/local_sender_whitelist}\
#                        {CONFDIR/local_sender_whitelist}\
#                        {}}

acl_check_rcpt:
  accept hosts = :

#  deny message = sender envelope address $sender_address is locally blacklisted here. If you think this is wrong, get in touch with postmaster
#       !acl = acl_whitelist_local_deny
#       senders = ${if exists{CONFDIR/local_sender_blacklist}\
#                             {CONFDIR/local_sender_blacklist}\
#                             {}}

#  deny message = sender IP address $sender_host_address is locally blacklisted here. If you think this is wrong, get in touch with postmaster
#       !acl = acl_whitelist_local_deny
#       hosts = ${if exists{CONFDIR/local_host_blacklist}\
#                             {CONFDIR/local_host_blacklist}\
#                             {}}

#  drop    condition = ${if eq{$sender_helo_name}{}{yes}{no}}
#          message = HELO/EHLO required by SMTP RFC.\n\
#                    Bye dude!

#  accept  senders = ${if exists{CONFDIR/whitelist_sender}\
#		{CONFDIR/whitelist_sender}\
#		{}}

#  accept  hosts = ${if exists{CONFDIR/whitelist_host}\
#		{CONFDIR/whitelist_host}\
#		{}}

  drop    !verify = sender/no_details
          message = Unrouteable sender address.\n\
                    Bye dude!

  deny    local_parts   = ^[.] : ^.*[@%!/|]
          message       = Restricted characters in address

  accept   hosts = +relay_from_hosts

#  deny    domains       = +local_domains
#          local_parts   = ^[.] : ^.*[@%!/|]
#          message       = Restricted characters in address

#  deny    domains       = !+local_domains
#          local_parts   = ^[./|] : ^.*[@%!] : ^.*/\\.\\./
#          message       = Restricted characters in address

#  drop  !verify = sender/callout=45s
#	message = \
#		Your email address is rejected by your mail server.\n\
#		You can't send mail here with a fake address.\n\
#		Bye dude!

#  accept local_parts = postmaster
#         domains = +local_domains : +relay_to_domains : +relay_this_domain

#  warn message = X-Broken-Reverse-DNS: no host name found for IP address $sender_host_address
#       !verify = reverse_host_lookup

#  accept authenticated = *

  require  message = Relay not permitted
           domains = +local_domains : +relay_to_domains : +relay_this_domain

  deny     message = Unknown user
           domains = +local_domains : +relay_to_domains : +relay_this_domain
           !verify = recipient

#  deny     message = Unrouteable address
#           domains = +relay_to_domains : +relay_this_domain
#           !verify = recipient

#  accept domains = +local_domains
#         endpass
#         message = unknown user
#         verify = recipient

#  accept domains = +relay_to_domains : +relay_this_domain
#         endpass
#         message = unrouteable address
#         verify = recipient

#  deny message = relay not permitted

#acl_check_data:

#  deny message = Message contains malware or a virus ($malware_name).
#       log_message = $sender_host_address tried sending $malware_name
#       demime = *
#       malware = *
#   warn condition = ${if !def:h_Message-ID: {1}}
#        hosts = +relay_from_hosts
#        message = Message-ID: <E$message_id@$primary_hostname>

   accept


begin routers

dnslookup_relay_to_domains:
  debug_print = "R: dnslookup_relay_to_domains for $local_part@$domain"
  driver = dnslookup
  domains = ! +local_domains : +relay_to_domains
  transport = remote_smtp
  same_domain_copy_routing = yes
  no_more

dnslookup:
  debug_print = "R: dnslookup for $local_part@$domain"
  driver = dnslookup
  domains = ! +local_domains : ! +relay_this_domain
  transport = remote_smtp
  same_domain_copy_routing = yes
  ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8 : 192.168.0.0/16 :\
                        172.16.0.0/12 : 10.0.0.0/8 : 169.254.0.0/16
  no_more

dnslookup_relay_this_domain:
  debug_print = "R: dnslookup_relay_this_domain for $local_part@$domain"
  driver = dnslookup
  domains = PGSQL_RELAY_CHECKLOCALPART
  transport = remote_smtp
  same_domain_copy_routing = yes
  no_more

#spamcheck_router:
#  driver = accept
#  no_verify
#  domains = PGSQL_VIRTUAL_SPAMCHECK
#  condition = "${if and { {!def:h_X-Spam-Flag:} {!eq {$received_protocol}{spam-scanned}}} {1}{0}}"
#  transport = spamcheck

system_aliases:
  debug_print = "R: system_aliases for $local_part@$domain"
  driver = redirect
  condition = ${if or { {eq {$domain} {$primary_hostname}} {eq {$domain} {$qualify_domain}}} {1} {0}}
  allow_fail
  allow_defer
  data = ${lookup{$local_part}lsearch{/etc/aliases}}
  file_transport = address_file

begin transports

address_file:
  debug_print = "T: address_file for $local_part@$domain"
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add

address_pipe:
  debug_print = "T: address_pipe for $local_part@$domain"
  driver = pipe
  return_fail_output

address_reply:
  debug_print = "T: autoreply for $local_part@$domain"
  driver = autoreply

mail_spool:
  debug_print = "T: appendfile for $local_part@$domain"
  driver = appendfile
  file = /var/mail/$local_part
  delivery_date_add
  envelope_to_add
  return_path_add
  group = mail
  mode = 0660
  mode_fail_narrower = false

maildrop_pipe:
  debug_print = "T: maildrop_pipe for $local_part@$domain"
  driver = pipe
  path = "/bin:/usr/bin:/usr/local/bin"
  command = "/usr/bin/maildrop"
  return_path_add
  delivery_date_add
  envelope_to_add

procmail_pipe:
  debug_print = "T: procmail_pipe for $local_part@$domain"
  driver = pipe
  path = "/bin:/usr/bin:/usr/local/bin"
  command = "/usr/bin/procmail"
  return_path_add
  delivery_date_add
  envelope_to_add

remote_smtp:
  debug_print = "T: remote_smtp for $local_part@$domain"
  driver = smtp

#spamcheck:
#  debug_print = "T: spamassassin_pipe for $local_part@$domain"
#  driver = pipe
#  command = /usr/sbin/exim4 -oMr spam-scanned -bS
#  use_bsmtp
#  transport_filter = /usr/bin/spamc -d 192.168.3.50 -p 783
#  home_directory = "/tmp"
#  current_directory = "/tmp"
#  user = Debian-exim 
#  group = Debian-exim
#  return_fail_output
#  headers_remove = X-Spam-Flag : X-Spam-Status : X-Spam-Level : X-Spam-Scanned

address_directory:
  debug_print = "T: address_directory for $local_part@$domain"
  driver = appendfile
  envelope_to_add = true
  return_path_add = true
  check_string = ""
  escape_string = ""
  maildir_format


begin retry

#*        quota_7d
#*        quota       F,2h,15m; F,3d,1h
*         *           F,1m,1m; F,4h,1h; G,20h,1h,1.5; F,6d,12h; F,24d,1d


begin rewrite

#*@+local_domains ${lookup{${local_part}}lsearch{/etc/email-addresses}\
#                   {$value}fail} Ffrs

#*@+local_domains "${if exists {CONFDIR/email-addresses}\
#                    {${lookup{${local_part}}lsearch{CONFDIR/email-addresses}\
#		    {$value}fail}}fail}" Ffrs


begin authenticators

# plain_server:
#   driver = plaintext
#   public_name = PLAIN
#   server_condition = ${if and {{!eq{$2}{}}{!eq{$3}{}}{eq {$3} {${lookup pgsql{select password from vhffs_boxes where local_part = '${local_part:$2}' and domain = '${domain:$2}'} {$value}fail}}}}{1}{0}}
#   server_set_id = $2
#   server_prompts = :

# login_server:
#   driver = plaintext
#   public_name = LOGIN
#   server_prompts = "Username:: : Password::"
#   server_condition = ${if and {{!eq{$1}{}}{!eq{$2}{}}{eq {$2} {${lookup pgsql{select password from vhffs_boxes where local_part = '${local_part:$1}' and domain = '${domain:$1}'} {$value}fail}}}}{1}{0}}
#   server_set_id = $1
